__NUXT_JSONP__("/posts/xml-file-parser-service", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D){return {data:[{blockMap:{"59d099d9-cd4e-41c8-9737-c28af22d57f3":{value:{id:f,version:389,type:"page",properties:{"0#}p":[["â€£",[["d",{type:"date",start_date:l}]]]],"IWg]":[[m]],MpSo:[[n]],"u\\k=":[[h,[["a",o]]]],"v\u003CK]":[["python,celery,celery beat,Redis"]],"ysX^":[["Yes"]],title:[[p]]},content:[q,r,s,t,u,v,w],created_time:1686587728077,last_edited_time:1686588123085,parent_id:i,parent_table:x,alive:c,file_ids:["564a1a1e-6f89-48e1-8a17-74cd93691bf0"],created_by_table:b,created_by_id:a,last_edited_by_table:b,last_edited_by_id:a,space_id:d},role:e},"9c1dd87b-0464-49af-b1e3-07dca70f6b61":{value:{id:"9c1dd87b-0464-49af-b1e3-07dca70f6b61",version:144,type:"collection_view_page",view_ids:["b9fd954b-349b-46bb-8995-677927518ae7"],collection_id:i,format:{collection_pointer:{id:i,table:x,spaceId:d},copied_from_pointer:{id:y,table:g,spaceId:"0c084d44-207c-426c-8c5d-e7e6e298949b"}},permissions:[{role:"editor",type:"user_permission",user_id:a},{role:e,type:"public_permission",added_timestamp:1674543078967,allow_duplicate:z}],created_by:A,created_time:1674543065659,last_edited_by:A,last_edited_time:1705505863591,parent_id:d,parent_table:"space",alive:c,copied_from:y,created_by_table:b,created_by_id:a,last_edited_by_table:b,last_edited_by_id:a,space_id:d},role:e},"f264e15e-eaa1-4c1a-b402-206104268e36":{value:{id:q,version:597,type:j,properties:{title:[["There are special wafer map configuration files that need to be processed before any wafer test data can be visualized in the front end application. The purpose of the service was to search for these XML Configuration files from a defined location and parse them every hour. Files go through a number of validations and then processed accordingly and stored to an Oracle database. I needed to deploy a stable service that is able to process large amounts of files in less time. After lots of reading blogs and recommendations from the Python community I decided to go with this setup. \n"]],language:[["Markdown"]]},created_time:1686587770569,last_edited_time:1686588018725,parent_id:f,parent_table:g,alive:c,created_by_table:b,created_by_id:a,last_edited_by_table:b,last_edited_by_id:a,space_id:d},role:e},"bf3f7b8b-6eaa-42c7-861c-539c9c2b7751":{value:{id:r,version:49,type:j,properties:{title:[["Major features:"]]},created_time:1686587832798,last_edited_time:1686587846263,parent_id:f,parent_table:g,alive:c,created_by_table:b,created_by_id:a,last_edited_by_table:b,last_edited_by_id:a,space_id:d},role:e},"02c8f70b-987c-455e-a533-7c789be0ee4c":{value:{id:s,version:12,type:k,properties:{title:[["Refactored code to allow switching out any part of the tech stack if necessary"]]},created_time:1686587846262,last_edited_time:1686587847141,parent_id:f,parent_table:g,alive:c,created_by_table:b,created_by_id:a,last_edited_by_table:b,last_edited_by_id:a,space_id:d},role:e},"5fac2ea6-d723-42d8-8ea3-6151e49e3cdc":{value:{id:t,version:19,type:k,properties:{title:[["Setup Celery Flower plugin in order to monitor worker uptime and jobs processed"]]},created_time:1686587840105,last_edited_time:B,parent_id:f,parent_table:g,alive:c,created_by_table:b,created_by_id:a,last_edited_by_table:b,last_edited_by_id:a,space_id:d},role:e},"579f0b67-5fcd-4c7c-829b-fe056eb0d764":{value:{id:u,version:5,type:k,properties:{title:[["Use ElementTree library for parsing XML"]]},created_time:1686587851688,last_edited_time:B,parent_id:f,parent_table:g,alive:c,created_by_table:b,created_by_id:a,last_edited_by_table:b,last_edited_by_id:a,space_id:d},role:e},"1761514e-3cb8-4536-8e87-c3732d38617e":{value:{id:v,version:3,type:j,created_time:C,last_edited_time:C,parent_id:f,parent_table:g,alive:c,created_by_table:b,created_by_id:a,last_edited_by_table:b,last_edited_by_id:a,space_id:d},role:e},"b4ae0542-a830-406c-9c26-8f4bf308208a":{value:{id:w,version:11,type:"image",properties:{size:[["49.7KB"]],title:[[h]],source:[[D]]},format:{block_width:719,display_source:D,block_full_width:z,block_page_width:c,block_aspect_ratio:.3045897079276773,block_preserve_scale:c},created_time:1686587858517,last_edited_time:1686587862310,parent_id:f,parent_table:g,alive:c,file_ids:["04451646-9c30-438e-8a31-4c742e8830bf"],created_by_table:b,created_by_id:a,last_edited_by_table:b,last_edited_by_id:a,space_id:d},role:e}},page:{id:f,created_at:l,description:m,slug:n,thumbnail:[{name:h,url:"https:\u002F\u002Fwww.notion.so\u002Fimage\u002Fhttps:%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F564a1a1e-6f89-48e1-8a17-74cd93691bf0%2Fotp.png?table=block&id=59d099d9-cd4e-41c8-9737-c28af22d57f3&cache=v2",rawUrl:o}],tags:["python","celery","celery beat","Redis"],public:c,title:p}}],fetch:{},mutations:void 0}}("0ba378f9-5b11-430d-9082-a2e34abcf232","notion_user",true,"47a01032-533f-4ceb-bcb9-a3dc11827e3b","comment_only","59d099d9-cd4e-41c8-9737-c28af22d57f3","block","otp.png","37d78f77-e97d-4340-a3e5-d0d39dcf4600","text","bulleted_list","2018-05-01","A high level overview of a file parser service using Celery","xml-file-parser-service","https:\u002F\u002Fs3-us-west-2.amazonaws.com\u002Fsecure.notion-static.com\u002F564a1a1e-6f89-48e1-8a17-74cd93691bf0\u002Fotp.png","Building a high performance XML file parser service","f264e15e-eaa1-4c1a-b402-206104268e36","bf3f7b8b-6eaa-42c7-861c-539c9c2b7751","02c8f70b-987c-455e-a533-7c789be0ee4c","5fac2ea6-d723-42d8-8ea3-6151e49e3cdc","579f0b67-5fcd-4c7c-829b-fe056eb0d764","1761514e-3cb8-4536-8e87-c3732d38617e","b4ae0542-a830-406c-9c26-8f4bf308208a","collection","ceef6f1a-895a-46b2-a0e4-a87b41405547",false,"204e031f-f12d-445c-ba1d-df7a7bbebfbc",1686587851690,1686587854561,"https:\u002F\u002Fs3-us-west-2.amazonaws.com\u002Fsecure.notion-static.com\u002F04451646-9c30-438e-8a31-4c742e8830bf\u002Fotp.png")));